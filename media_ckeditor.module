<?php

/**
 * @file
 * Primarily Drupal hooks.
 */

/**
 * Implements hook_element_info_alter().
 */
function media_ckeditor_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'media_ckeditor_pre_render_text_format';
  $types['media']['#pre_render'][] = 'media_ckeditor_pre_render_media';
}

/**
 * Adds CKEditor-specific JavaScript.
 */
function media_ckeditor_pre_render_text_format($element) {
  // filter_process_format() copies properties to the expanded 'value' child
  // element.
  if (!isset($element['format'])) {
    return $element;
  }

  $field = &$element['value'];
  $settings = array(
    'field' => $field['#id'],
  );

  if (!isset($field['#value'])) {
    return $element;
  }

  // Add CKEditor-specific JS.
  $element['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'media_ckeditor') . '/js/plugins/media/library.js',
    'type' => 'file',
    'scope' => 'footer',
    // It's important that this javascript fire after CKEditor.
    'weight' => 20,
  );

  return $element;
}

/**
 * Implements hook_form_ID_alter().
 */
function media_ckeditor_form_media_wysiwyg_format_form_alter(&$form, $form_state) {
  // Add our overrides to the media format form javascript.
  $form['#attached']['js'][] = drupal_get_path('module', 'media_ckeditor') . '/js/media_ckeditor.format_form.js';
}

/**
 * Implements hook_media_browser_params_alter().
 */
function media_ckeditor_media_browser_params_alter(&$stored_params) {
  // We add this custom param when the media dialog is invoked in library.js.
  if (isset($stored_params['id']) && $stored_params['id'] == 'media_wysiwyg') {
    // Set the default browser params from settings form if not already set.
    if (empty($stored_params['enabledPlugins'])) {
      $stored_params['enabledPlugins'] = variable_get('media_wysiwyg_wysiwyg_browser_plugins', array());
    }
    if (empty($stored_params['file_directory'])) {
      $stored_params['file_directory'] = variable_get('media_wysiwyg_wysiwyg_upload_directory', '');
    }
    if (empty($stored_params['types'])) {
      $stored_params['types'] = variable_get('media_wysiwyg_wysiwyg_allowed_types', array(
        'audio',
        'image',
        'video',
        'document'
      ));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_ckeditor_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  // Add a checkbox that marks this field as needing an "Insert" button.
  if (!empty($form['#instance']['widget']['module'])) {
    if ('media' === $form['#instance']['widget']['module']) {
      $form['instance']['settings']['wysiwyg_insert'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show button for inserting files into WYSIWYG editor'),
        '#description' => t('If checked, then an "Insert" button will be available to put attached files into the active WYSIWYG editor.'),
        '#default_value' => isset($form['#instance']['settings']['wysiwyg_insert']) ? $form['#instance']['settings']['wysiwyg_insert'] : FALSE,
      );
    }
  }
}

/**
 * Pre-render callback for media elements.
 */
function media_ckeditor_pre_render_media($element) {
  // If the media widget has been configured to have an Insert button, we'll
  // communicate that information through javascript settings.
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
  if (!empty($instance['settings']['wysiwyg_insert'])) {
    $element['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array(
        'media_ckeditor' => array(
          'wysiwyg_insert' => array(
            $element['#field_name'] => TRUE,
          ),
        ),
      ),
    );
  }
  return $element;
}